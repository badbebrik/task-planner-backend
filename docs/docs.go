// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/login": {
            "post": {
                "description": "Аутентифицирует по email и паролю, возвращает JWT-токены + данные пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Вход пользователя",
                "parameters": [
                    {
                        "description": "Данные для входа",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "description": "Ревокирует переданный refresh-токен",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Выход (logout)",
                "parameters": [
                    {
                        "description": "Refresh-токен",
                        "name": "logoutRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/refresh": {
            "post": {
                "description": "Обменивает refresh-токен на новую пару access/refresh",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Обновление токенов",
                "parameters": [
                    {
                        "description": "Refresh-токен",
                        "name": "refreshRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/send-code": {
            "post": {
                "description": "Отправляет новый код подтверждения на email пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Повторная отправка кода верификации",
                "parameters": [
                    {
                        "description": "Email пользователя",
                        "name": "sendVerificationCode",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SendVerificationCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verification code sent",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/signup": {
            "post": {
                "description": "Регистрирует нового пользователя и отправляет код верификации на email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Регистрация пользователя",
                "parameters": [
                    {
                        "description": "Данные регистрации",
                        "name": "signupRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Account successfully created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/verify-email": {
            "post": {
                "description": "Проверяет код подтверждения и возвращает JWT-токены + данные пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Подтверждение email",
                "parameters": [
                    {
                        "description": "Email и код верификации",
                        "name": "verifyEmailRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyEmailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/availability/{goal_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает интервалы доступности для указанной цели",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedule"
                ],
                "summary": "Получить доступность по цели",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID цели",
                        "name": "goal_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные доступности",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateAvailabilityRequest"
                        }
                    },
                    "400": {
                        "description": "Invalid goal_id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Устанавливает интервалы доступного времени для задач указанной цели и запускает авторасписание",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedule"
                ],
                "summary": "Создать или обновить доступность по цели",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID цели",
                        "name": "goal_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные доступности",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateAvailabilityRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Количество запланированных задач",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateAvailabilityResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid goal_id or JSON",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/availability/{goal_id}/schedule": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Автоматически планирует \"todo\"-задачи указанной цели в доступные интервалы",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedule"
                ],
                "summary": "Авторасписание задач по цели",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID цели",
                        "name": "goal_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Сообщение и число запланированных задач",
                        "schema": {
                            "$ref": "#/definitions/dto.AutoScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid goal_id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/goals": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает постраничный список целей пользователя с фильтром по статусу",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goal"
                ],
                "summary": "Список целей",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Фильтр по статусу (planning,in_progress,completed)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Максимальное число элементов",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Смещение для пагинации",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get.ListGoalsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Сохраняет новую цель вместе с фазами и задачами в базе",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goal"
                ],
                "summary": "Создание цели",
                "parameters": [
                    {
                        "description": "Данные новой цели",
                        "name": "CreateGoalRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/create.CreateGoalRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/create.CreateGoalResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/goals/generate": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Создаёт рекомендуемую декомпозицию цели на фазы и задачи через LLM",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goal"
                ],
                "summary": "Генерация разбивки цели",
                "parameters": [
                    {
                        "description": "Данные для генерации цели",
                        "name": "GenerateGoalRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/generate.GenerateGoalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/generate.GenerateGoalResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to generate goal",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/goals/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает подробную информацию о цели, включая фазы и задачи",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goal"
                ],
                "summary": "Получить цель по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID цели",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Подробная информация о цели",
                        "schema": {
                            "$ref": "#/definitions/dto.GoalResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid goal ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Goal not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Удаляет цель по ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goal"
                ],
                "summary": "Удалить цель",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID цели",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid goal ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/motivation/today": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает текст мотивации для текущего пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Motivation"
                ],
                "summary": "Получить мотивацию на сегодня",
                "responses": {
                    "200": {
                        "description": "{\\\"motivation\\\": \\\"...\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/schedule": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает запланированные задачи за день или диапазон дат",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedule"
                ],
                "summary": "Получить расписание",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Конкретный день YYYY-MM-DD",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Начало диапазона YYYY-MM-DD",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Конец диапазона YYYY-MM-DD",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Расписание за диапазон",
                        "schema": {
                            "$ref": "#/definitions/dto.GetScheduleRangeResponse"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid date parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/scheduled_tasks/{id}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Переключает статус запланированной задачи (intervalID) на выполнено или нет",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedule"
                ],
                "summary": "Отметить или отменить выполнение запланированной задачи",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID запланированного задания",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Статус задачи",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ToggleTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid id or JSON",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/stats": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает статистику выполненных и ожидающих задач за прошлую неделю",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedule"
                ],
                "summary": "Получить статистику задач",
                "responses": {
                    "200": {
                        "description": "Статистика по дням",
                        "schema": {
                            "$ref": "#/definitions/dto.GetStatsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/tasks/upcoming": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает список ближайших запланированных задач с опциональным лимитом",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedule"
                ],
                "summary": "Получить предстоящие задачи",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Максимальное число задач",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список задач",
                        "schema": {
                            "$ref": "#/definitions/dto.GetUpcomingTasksResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает данные пользователя по JWT из заголовка",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Получить информацию о текущем пользователе",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "create.CreateGoalRequest": {
            "type": "object",
            "required": [
                "hours_per_week",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "estimated_time": {
                    "type": "integer"
                },
                "hours_per_week": {
                    "type": "integer",
                    "minimum": 1
                },
                "phases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/create.CreatePhaseRequest"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "create.CreateGoalResponse": {
            "type": "object",
            "properties": {
                "goal": {
                    "$ref": "#/definitions/dto.GoalResponse"
                }
            }
        },
        "create.CreatePhaseRequest": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "estimatedTime": {
                    "type": "integer"
                },
                "order": {
                    "type": "integer"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/create.CreateTaskRequest"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "create.CreateTaskRequest": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "estimated_time": {
                    "type": "integer"
                },
                "title": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "dto.AutoScheduleResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "scheduled_tasks": {
                    "type": "integer"
                }
            }
        },
        "dto.DayAvailability": {
            "type": "object",
            "properties": {
                "day_of_week": {
                    "type": "integer"
                },
                "slots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TimeSlotDTO"
                    }
                }
            }
        },
        "dto.DaySchedule": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ScheduledTaskDTO"
                    }
                }
            }
        },
        "dto.DayStat": {
            "type": "object",
            "properties": {
                "completed": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "pending": {
                    "type": "integer"
                }
            }
        },
        "dto.GetScheduleForDayResponse": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ScheduledTaskDTO"
                    }
                }
            }
        },
        "dto.GetScheduleRangeResponse": {
            "type": "object",
            "properties": {
                "schedule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DaySchedule"
                    }
                }
            }
        },
        "dto.GetStatsResponse": {
            "type": "object",
            "properties": {
                "week": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DayStat"
                    }
                }
            }
        },
        "dto.GetUpcomingTasksResponse": {
            "type": "object",
            "properties": {
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UpcomingTaskDTO"
                    }
                }
            }
        },
        "dto.GoalResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "estimated_time": {
                    "type": "integer"
                },
                "hours_per_week": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "phases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PhaseResponse"
                    }
                },
                "progress": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/dto.UserResponse"
                }
            }
        },
        "dto.LogoutRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.PhaseResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "goal_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "progress": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TaskResponse"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.RefreshRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.RefreshResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.ScheduledTaskDTO": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "goal_title": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.SendVerificationCode": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.SignupRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.TaskResponse": {
            "type": "object",
            "properties": {
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "estimated_time": {
                    "type": "integer"
                },
                "goal_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "phase_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.TimeSlotDTO": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "dto.ToggleTaskRequest": {
            "type": "object",
            "properties": {
                "done": {
                    "type": "boolean"
                }
            }
        },
        "dto.UpcomingTaskDTO": {
            "type": "object",
            "properties": {
                "goal_title": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "scheduled_date": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateAvailabilityRequest": {
            "type": "object",
            "properties": {
                "days": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DayAvailability"
                    }
                }
            }
        },
        "dto.UpdateAvailabilityResponse": {
            "type": "object",
            "properties": {
                "scheduled_tasks": {
                    "type": "integer"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.VerifyEmailRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.VerifyEmailResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/dto.UserResponse"
                }
            }
        },
        "generate.GenerateGoalRequest": {
            "type": "object",
            "required": [
                "hours_per_week",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "hours_per_week": {
                    "type": "integer",
                    "minimum": 1
                },
                "title": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "generate.GenerateGoalResponse": {
            "type": "object",
            "properties": {
                "generated_goal": {
                    "$ref": "#/definitions/generate.GeneratedGoalPreview"
                }
            }
        },
        "generate.GeneratedGoalPreview": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "estimated_time": {
                    "type": "integer"
                },
                "hours_per_week": {
                    "type": "integer"
                },
                "phases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generate.GeneratedPhaseDraft"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "generate.GeneratedPhaseDraft": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "estimatedTime": {
                    "type": "integer"
                },
                "order": {
                    "type": "integer"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generate.GeneratedTaskDraft"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "generate.GeneratedTaskDraft": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "estimated_time": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.ListGoalItem": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "hours_per_week": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "next_task": {
                    "type": "object",
                    "properties": {
                        "due_date": {
                            "type": "string"
                        },
                        "id": {
                            "type": "string"
                        },
                        "title": {
                            "type": "string"
                        }
                    }
                },
                "progress": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "get.ListGoalsResponse": {
            "type": "object",
            "properties": {
                "goals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/get.ListGoalItem"
                    }
                },
                "meta": {
                    "type": "object",
                    "properties": {
                        "limit": {
                            "type": "integer"
                        },
                        "offset": {
                            "type": "integer"
                        },
                        "total": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/",
	Schemes:          []string{},
	Title:            "WhatAmIToDo API",
	Description:      "API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
